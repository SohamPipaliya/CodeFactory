// <auto-generated />
using System;
using CodeFactoryAPI.DAL;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace CodeFactoryAPI.Migrations
{
    [DbContext(typeof(Context))]
    [Migration("20210218112627_CodeFactory")]
    partial class CodeFactory
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.3")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("CodeFactoryAPI.Models.Message", b =>
                {
                    b.Property<Guid>("Message_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("MessageDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Messages")
                        .IsRequired()
                        .HasMaxLength(2147483647)
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("Messeger_ID")
                        //.IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("Question_ID")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("Receiver_ID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Message_ID");

                    b.HasIndex("Messeger_ID");

                    b.HasIndex("Question_ID");

                    b.HasIndex("Receiver_ID");

                    b.ToTable("Messages");
                });

            modelBuilder.Entity("CodeFactoryAPI.Models.Question", b =>
                {
                    b.Property<Guid>("Question_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("AskedDate")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Image1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Image2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Image3")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Image4")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Image5")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("Tag1_ID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("Tag2_ID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("Tag3_ID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("Tag4_ID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("Tag5_ID")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("User_ID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Question_ID");

                    b.HasIndex("Tag1_ID");

                    b.HasIndex("Tag2_ID");

                    b.HasIndex("Tag3_ID");

                    b.HasIndex("Tag4_ID");

                    b.HasIndex("Tag5_ID");

                    b.HasIndex("User_ID");

                    b.ToTable("Questions");
                });

            modelBuilder.Entity("CodeFactoryAPI.Models.Reply", b =>
                {
                    b.Property<Guid>("Reply_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Image1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Image2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Image3")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Image4")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Image5")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("Question_ID")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("RepliedDate")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("User_ID")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Reply_ID");

                    b.HasIndex("Question_ID");

                    b.HasIndex("User_ID");

                    b.ToTable("Replies");
                });

            modelBuilder.Entity("CodeFactoryAPI.Models.Tag", b =>
                {
                    b.Property<Guid>("Tag_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Tag_ID");

                    b.ToTable("Tags");
                });

            modelBuilder.Entity("CodeFactoryAPI.Models.User", b =>
                {
                    b.Property<Guid>("User_ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<DateTime>("RegistrationDate")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.HasKey("User_ID");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("CodeFactoryAPI.Models.Message", b =>
                {
                    b.HasOne("CodeFactoryAPI.Models.User", "Messeger")
                        .WithMany()
                        .HasForeignKey("Messeger_ID")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired();

                    b.HasOne("CodeFactoryAPI.Models.Question", "Question")
                        .WithMany("Messages")
                        .HasForeignKey("Question_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CodeFactoryAPI.Models.User", "Receiver")
                        .WithMany()
                        .HasForeignKey("Receiver_ID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Messeger");

                    b.Navigation("Question");

                    b.Navigation("Receiver");
                });

            modelBuilder.Entity("CodeFactoryAPI.Models.Question", b =>
                {
                    b.HasOne("CodeFactoryAPI.Models.Tag", "Tag1")
                        .WithMany()
                        .HasForeignKey("Tag1_ID")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("CodeFactoryAPI.Models.Tag", "Tag2")
                        .WithMany()
                        .HasForeignKey("Tag2_ID")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("CodeFactoryAPI.Models.Tag", "Tag3")
                        .WithMany()
                        .HasForeignKey("Tag3_ID")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("CodeFactoryAPI.Models.Tag", "Tag4")
                        .WithMany()
                        .HasForeignKey("Tag4_ID")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("CodeFactoryAPI.Models.Tag", "Tag5")
                        .WithMany()
                        .HasForeignKey("Tag5_ID")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("CodeFactoryAPI.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("User_ID")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Tag1");

                    b.Navigation("Tag2");

                    b.Navigation("Tag3");

                    b.Navigation("Tag4");

                    b.Navigation("Tag5");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CodeFactoryAPI.Models.Reply", b =>
                {
                    b.HasOne("CodeFactoryAPI.Models.Question", "Question")
                        .WithMany("Replies")
                        .HasForeignKey("Question_ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CodeFactoryAPI.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("User_ID")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Question");

                    b.Navigation("User");
                });

            modelBuilder.Entity("CodeFactoryAPI.Models.Question", b =>
                {
                    b.Navigation("Messages");

                    b.Navigation("Replies");
                });
#pragma warning restore 612, 618
        }
    }
}
